// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz.QuestionStorage.Db;

#nullable disable

namespace Quiz.QuestionStorage.Db.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230226110507_AddingOneTextChoiceAnswerDefinition")]
    partial class AddingOneTextChoiceAnswerDefinition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.AnswerDefinition", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("NotesForPlayers")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("QuestionId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AnswerDefinitionType")
                        .HasColumnType("int");

                    b.Property<int>("QuestionFormulationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.QuestionFormulation", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("NotesForHost")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("QuestionId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.FreeTextAnswerDefinition", b =>
                {
                    b.HasBaseType("Quiz.QuestionStorage.Db.Models.AnswerDefinition");

                    b.Property<string>("AdditionalAnswers")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.ToTable("FreeTextAnswerDefinitions");
                });

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.OneTextChoiceAnswerDefinition", b =>
                {
                    b.HasBaseType("Quiz.QuestionStorage.Db.Models.AnswerDefinition");

                    b.Property<byte>("CorrectVariant")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Variants")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.ToTable("OneTextChoiceAnswerDefinitions");
                });

            modelBuilder.Entity("Quiz.QuestionStorage.Db.Models.TextOnlyQuestionFormulation", b =>
                {
                    b.HasBaseType("Quiz.QuestionStorage.Db.Models.QuestionFormulation");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.ToTable("TextOnlyFormulations");
                });
#pragma warning restore 612, 618
        }
    }
}
